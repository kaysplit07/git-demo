#!/bin/bash

# Input file containing multiple PEM certificates
input_file="allcerts-base64d-unique.txt"

# Get the current date in a format comparable to OpenSSL's output
current_date=$(date -u +"%b %d %H:%M:%S %Y GMT")

# Create the PEM directory if it does not exist
pem_dir="PEM"
mkdir -p "$pem_dir"

# Temporary variable to store each certificate
cert_content=""
cert_found=false
cert_count=0

# Read the input file line by line
while IFS= read -r line || [[ -n "$line" ]]; do
    if [[ "$line" == "-----BEGIN CERTIFICATE-----" ]]; then
        cert_found=true
        cert_content="$line"
    elif [[ "$line" == "-----END CERTIFICATE-----" ]]; then
        cert_content+="\n$line"

        # Extract the expiration date of the certificate using OpenSSL
        expiry_date=$(echo -e "$cert_content" | openssl x509 -enddate -noout 2>/dev/null | cut -d= -f2)

        # Compare the expiry date with the current date
        if [[ -n "$expiry_date" ]]; then
            if [[ "$(date -u -j -f "%b %d %H:%M:%S %Y GMT" "$expiry_date" +%s 2>/dev/null)" -lt "$(date -u -j -f "%b %d %H:%M:%S %Y GMT" "$current_date" +%s 2>/dev/null)" ]]; then
                echo "Cert expired on $expiry_date and not saved"
            else
                ((cert_count++))
                cert_filename="$pem_dir/cert${cert_count}.pem"
                echo "Cert is valid until $expiry_date and saved as $cert_filename"
                echo -e "$cert_content" > "$cert_filename"
            fi
        else
            echo "Could not determine expiry date. Skipping certificate."
        fi

        cert_content=""
        cert_found=false
    else
        if $cert_found; then
            cert_content+="\n$line"
        fi
    fi
done < "$input_file"


###################

#!/bin/bash

# Directories for input PEM files and output YAML files
pem_dir="PEM"
yaml_dir="secrets"

# Create the secrets directory if it does not exist
mkdir -p "$yaml_dir"

# Loop through all valid .pem certificates in the PEM directory
for cert_file in "$pem_dir"/cert*.pem; do
    if [[ -f "$cert_file" ]]; then
        echo "Processing $cert_file..."

        # Extract base64-encoded certificate data
        cert_base64=$(base64 -w 0 "$cert_file")  # Linux
        # cert_base64=$(base64 "$cert_file" | tr -d '\n')  # macOS

        # Extract cert number from filename (e.g., cert1.pem → cert1)
        cert_name=$(basename "$cert_file" .pem)

        # Define YAML output file
        yaml_file="$yaml_dir/$cert_name.yaml"

        # Create YAML Secret file
        cat <<EOF > "$yaml_file"
apiVersion: v1
data:
  $cert_name: $cert_base64
kind: Secret
metadata:
  name: $cert_name
  namespace: cobalt
  labels:
    k8slens-edit-resource-version: v1
type: Opaque
EOF

        echo "$cert_file converted to $yaml_file"
    fi
done

echo "✅ All certificates have been converted to YAML secrets in '$yaml_dir'."
