Updated Workflow with GitHub Secrets
In this version, BACKEND_STORAGE_ACCOUNT and BACKEND_RESOURCE_GROUP are stored in GitHub Secrets and dynamically retrieved based on the environment input.

yaml
Copy code
name: 'zLoad Balancer (Call)'
run-name: '${{ github.actor }} - Creating Load Balancer'

on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: false
      location:
        type: string
        required: true
      environment:
        type: string
        required: true
      vm_names:
        type: string
        required: false
env:
  permissions:
    contents: read

jobs:
  lb-create:
    name: 'Create Azure Load Balancer'
    env:
      ARM_CLIENT_ID:        ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:    ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID:        ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ROOT_PATH:            'Azure/Azure-LB'
    runs-on:
      group: aks-runners
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: 'Azure/Azure-LB'
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          if [ "${{ inputs.environment }}" = "prod" ]; then
              echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.PROD_BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
              echo "BACKEND_RESOURCE_GROUP=${{ secrets.PROD_BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
          elif [ "${{ inputs.environment }}" = "uat" ]; then
              echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.UAT_BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
              echo "BACKEND_RESOURCE_GROUP=${{ secrets.UAT_BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
          else
              echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.DEV_BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
              echo "BACKEND_RESOURCE_GROUP=${{ secrets.DEV_BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
          fi

      - name: 'Terraform Init - Load Balancer'
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=${{ inputs.environment }}-lb-terraform.tfstate" \
          -input=false
        env:
          TF_VAR_requesttype:         '${{ inputs.requestType }}'
          TF_VAR_location:            '${{ inputs.location }}'
          TF_VAR_environment:         '${{ inputs.environment }}'
          TF_VAR_vm_names:            '${{ inputs.vm_names }}'
Key Changes
GitHub Secrets for Each Environment

Store BACKEND_STORAGE_ACCOUNT and BACKEND_RESOURCE_GROUP for each environment (prod, uat, dev) in GitHub Secrets:
PROD_BACKEND_STORAGE_ACCOUNT
PROD_BACKEND_RESOURCE_GROUP
UAT_BACKEND_STORAGE_ACCOUNT
UAT_BACKEND_RESOURCE_GROUP
DEV_BACKEND_STORAGE_ACCOUNT
DEV_BACKEND_RESOURCE_GROUP
You can add these secrets in your repository or organization-level GitHub settings under Settings > Secrets and variables > Actions.

Dynamic Environment Variable Assignment

The Set Environment Variables step dynamically assigns the values from GitHub Secrets based on the environment input.
The values are appended to the $GITHUB_ENV file, making them available to all subsequent steps.
Use in Terraform Commands

The dynamically assigned BACKEND_STORAGE_ACCOUNT and BACKEND_RESOURCE_GROUP values are passed to the Terraform init command using the $BACKEND_STORAGE_ACCOUNT and $BACKEND_RESOURCE_GROUP environment variables.
Why This Approach?
No Hardcoding: The sensitive values are securely stored and managed in GitHub Secrets.
Environment-Specific Values: The workflow automatically selects the correct values based on the environment input.
Reusable Workflow: This setup can handle new environments by simply adding corresponding secrets.
Adding Secrets to GitHub
Navigate to your repository.
Go to Settings > Secrets and variables > Actions.
Add the following secrets:
PROD_BACKEND_STORAGE_ACCOUNT
PROD_BACKEND_RESOURCE_GROUP
UAT_BACKEND_STORAGE_ACCOUNT
UAT_BACKEND_RESOURCE_GROUP
DEV_BACKEND_STORAGE_ACCOUNT
DEV_BACKEND_RESOURCE_GROUP
For each secret, provide the appropriate value for the environment.

This approach keeps your workflow secure, flexible, and scalable. Let me know if you have further questions!







