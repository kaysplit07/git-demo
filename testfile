# Decode data for naming and configuration from the input CSV
locals {
  get_data = csvdecode(file("../parameters.csv"))

  naming = {
    bu                 = lower(split("-", data.azurerm_subscription.current.display_name)[1])
    environment        = lower(split("-", data.azurerm_subscription.current.display_name)[2])
    locations          = var.location
    nn                 = lower(split("-", data.azurerm_subscription.current.display_name)[3])
    subscription_name  = data.azurerm_subscription.current.display_name
    subscription_id    = data.azurerm_subscription.current.id
  }

  env_location = {
    env_abbreviation       = var.environment_map[local.naming.environment]
    locations_abbreviation = var.location_map[local.naming.locations]
  }

  purpose = var.RGname != "" ? lower(split("-", var.RGname)[3]) : var.purpose
}

# Define MSSQL Server
resource "azurerm_mssql_server" "mssqlserver" {
  for_each = { for inst in local.get_data : inst.unique_id => inst }
  name                         = join("", [local.naming.bu, "-", local.naming.environment, "-", local.env_location.locations_abbreviation, "-", local.purpose, "-sql-", random_id.randomnumber.hex])
  resource_group_name          = lookup(each.value, "RGname", null) != null && lookup(each.value, "RGname", "") != "" && var.RGname != "" ? each.value.RGname : data.azurerm_resource_group.rg[each.key].name
  location                     = var.location
  version                      = var.dbserverversion
  minimum_tls_version          = var.tlsversion
  public_network_access_enabled = false

  azuread_administrator {
    azuread_authentication_only = true
    login_username = data.azurerm_subscription.current.display_name
    object_id      = data.azurerm_client_config.clientconfig.object_id
  }
}

# Create multiple SQL Databases for each server
resource "azurerm_mssql_database" "sqldb" {
  for_each = tomap({
    for server_id, server_config in azurerm_mssql_server.mssqlserver :
    server_id => [
      for db_name in split(",", lookup(local.get_data[server_id], "databases", "")) : {
        name = db_name
      }
    ]
  })

  name           = join("", [local.naming.bu, "-", local.naming.environment, "-", local.env_location.locations_abbreviation, "-", local.purpose, "-", each.value.name])
  server_id      = azurerm_mssql_server.mssqlserver[each.key].id
  collation      = var.collation
  license_type   = "LicenseIncluded"
  sku_name       = var.skuname
  zone_redundant = var.zoneredundancy

  depends_on = [azurerm_mssql_server.mssqlserver]
}

# Output the databases for visibility
output "databases" {
  value = {
    for db in azurerm_mssql_database.sqldb : db.name => {
      server = db.server_id
    }
  }
  sensitive = true
}



unique_id,RGname,databases
1,my-resource-group,db1,db2,db3
2,another-resource-group,dbA,dbB
