provider "azurerm" {
  features {}
}

data "azurerm_subscription" "current" {}  // read the current subscription info

data "azurerm_client_config" "clientconfig" {} // read the current client config

locals {
  get_data = csvdecode(file("../parameters.csv"))
  
  naming = {
    bu = lower(split("-", data.azurerm_subscription.current.display_name)[1])
    environment = lower(split("-", data.azurerm_subscription.current.display_name)[2])
    locations = var.location
    nn = lower(split("-", data.azurerm_subscription.current.display_name)[3])
    subscription_name = data.azurerm_subscription.current.display_name
    subscription_id = data.azurerm_subscription.current.id
  }
  env_location = {
    env_abbreviation = var.environment_map[local.naming.environment]
    locations_abbreviation = var.location_map[local.naming.locations]
  }
  purpose = var.RGname != "" ? lower(split("-", var.RGname)[3]) : var.purpose
  purpose_rg = var.purpose_rg
}

# Define the Resource Group
data "azurerm_resource_group" "rg" {
  name = join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, local.purpose, "rg"]) 
}

# Define the Virtual Network
data "azurerm_virtual_network" "vnet" {
  name = local.get_data[0].vnet_name != "" ? local.get_data[0].vnet_name : join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "vnet", local.naming.nn])
  resource_group_name = local.get_data[0].vnet_resource_group != "" ? local.get_data[0].vnet_resource_group : data.azurerm_resource_group.rg.name
}

# Define the Subnet
data "azurerm_subnet" "subnet" {
  name = local.get_data[0].subnet_name != "" ? local.get_data[0].subnet_name : var.subnetname
  virtual_network_name = data.azurerm_virtual_network.vnet.name
  resource_group_name = data.azurerm_virtual_network.vnet.resource_group_name
}

output "resource_group_name" {
  value = data.azurerm_resource_group.rg.name
}

output "virtual_network_id" {
  value = data.azurerm_virtual_network.vnet.id
}

output "subnet_id" {
  value = data.azurerm_subnet.subnet.id
}

# Azure Load Balancer Resource
resource "random_id" "randomnumber" {
  byte_length = 1
}

resource "azurerm_lb" "internal_lb" {
  name                = join("-", ["ari", local.naming.environment, local.env_location.locations_abbreviation, local.purpose_rg, "lbi", random_id.randomnumber.hex])
  location            = var.location
  resource_group_name = data.azurerm_resource_group.rg.name
  sku                 = var.sku_name

  frontend_ip_configuration {
    name                          = "internal-${local.purpose_rg}-server-feip"
    subnet_id                     = data.azurerm_subnet.subnet.id
    private_ip_address            = var.private_ip_address
    private_ip_address_allocation = "Static"
  }
}

# Define Backend Address Pool
resource "azurerm_lb_backend_address_pool" "internal_lb_bepool" {
  loadbalancer_id = azurerm_lb.internal_lb.id
  name            = "internal-${local.purpose_rg}-server-bepool"
}

# Load Balancer Probe
resource "azurerm_lb_probe" "tcp_probe" {
  name            = "internal-${local.purpose_rg}-server-tcp-probe"
  loadbalancer_id = azurerm_lb.internal_lb.id
  protocol        = "Tcp"
  port            = 20000
  interval_in_seconds = 10
  number_of_probes = 5
}

# Load Balancer TCP Rule
resource "azurerm_lb_rule" "tcp_rule" {
  name                           = "internal-${local.purpose_rg}-server-tcp-lbrule"
  loadbalancer_id                = azurerm_lb.internal_lb.id
  protocol                       = "Tcp"
  frontend_port                  = 20000
  backend_port                   = 20000
  frontend_ip_configuration_name = azurerm_lb.internal_lb.frontend_ip_configuration[0].name
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.internal_lb_bepool.id]
  idle_timeout_in_minutes        = 5
  enable_floating_ip             = false
  enable_tcp_reset               = false
  disable_outbound_snat          = false
  probe_id                       = azurerm_lb_probe.tcp_probe.id
}

# Load Balancer HTTPS Rule
resource "azurerm_lb_rule" "https_rule" {
  name                           = "internal-${local.purpose_rg}-server-https-lbrule"
  loadbalancer_id                = azurerm_lb.internal_lb.id
  protocol                       = "Tcp"
  frontend_port                  = 443
  backend_port                   = 443
  frontend_ip_configuration_name = azurerm_lb.internal_lb.frontend_ip_configuration[0].name
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.internal_lb_bepool.id]
  idle_timeout_in_minutes        = 4
  enable_floating_ip             = false
  enable_tcp_reset               = false
  disable_outbound_snat          = false
  probe_id                       = azurerm_lb_probe.tcp_probe.id
}
