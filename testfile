  163 changes: 79 additions & 84 deletions163  
.github/workflows/Deploy_lb.yml
Viewed
Original file line number	Diff line number	Diff line change
@@ -1,6 +1,5 @@
name: '- Deploy Load Balancer'
run-name: 'Load Balancer - ${{ inputs.environment }} purpose: ${{ inputs.purpose }} : ${{ inputs.requesttype }}'

Author
@akintk_grid akintk_grid 15 minutes ago
No changes made here

@akintk_grid	Reply...
name: 'Deploy Load Balancer'
run-name: 'Load Balancer - ${{inputs.environment}} purpose: ${{inputs.purpose}} : ${{inputs.requesttype}}'
on:
  workflow_dispatch:
    inputs:
@@ -11,117 +10,113 @@ on:
        options:
            - Create (with New RG)
            - Create (with Existing RG)
            - Remove (Destroy LB)
        default: 
            "Create (with New RG)"
            - Remove
Author
@akintk_grid akintk_grid 14 minutes ago
Replaced destroy LB with remove LB

@akintk_grid	Reply...
        default: "Create (with New RG)"
      environment:
        type: choice
        required: true
        description: Environment
        options:
        - DEV
        - UAT
        - QA
        - PROD
          - DEV
Author
@akintk_grid akintk_grid 14 minutes ago
No changes made here

@akintk_grid	Reply...
          - UAT
          - QA
          - PROD
      location:
        type: choice
        required: true
        description: Deployment Location
        options:
            - Select the location
            - eastus2
            - uksouth
            - centralus
            - ukwest
      purposeRG:
        type: string
        required: true
        description: Resource Group Purpose. Hyphen designates an existing RG
      sku:
          - Select the location
          - eastus2
          - uksouth
          - centralus
          - ukwest
      sku_name:
        type: choice
        required: false
        description: SKU Type for the Load Balancer
        description: SKU for Load Balancer
        options:
            - Basic
            - Standard
          - Standard
          - Basic
        default: "Standard"
      private_ip:
      purpose:
        type: string
        required: false
        description: Private IP address for the Load Balancer frontend configuration (if applicable)
      subnetName:
        required: true
        description: Purpose of the Load Balancer
      purposeRG:
        type: string
        required: true
        description: Subnet name for the network interface

        description: Resource Group Purpose.......... Hyphen designate an existing RG
      subnetname:
        type: string
        required: true
        description: Subnet name for Load Balancer.
      private_ip_address:
        type: string
        required: false
        description: Private IP address for Load Balancer frontend configuration.
      nic_names:
        description: "Comma-separated list of NIC names"
        required: true
        default: "nic1,nic2,nic3"
jobs:
  resource_group:
    if: (github.event.inputs.requesttype == 'Create (with New RG)')
    name: 'Resource Group ${{ inputs.purposeRG }}'
    name: 'Resource Group ${{inputs.purposeRG}}'
    uses: ./.github/workflows/CreateResourceGroup.yml
    secrets:
Author
@akintk_grid akintk_grid 9 minutes ago
used inherit for secrets as terraform is not able to retrieve the secrets

@akintk_grid	Reply...
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    secrets: inherit
    with:
      name: 'resource-group'
      subscription: 'SNow Input'
      environment: '${{ inputs.environment }}'
      location: '${{ inputs.location }}'
      purpose: '${{ inputs.purposeRG }}'

      name:                 'resource-group'
      subscription:         'SNow Input'
      environment:          '${{inputs.environment}}' 
      location:             '${{inputs.location}}' 
      purpose:              '${{inputs.purposeRG}}'
  
  load_balancer_new_rg:
    if: (github.event.inputs.requesttype == 'Create (with New RG)')
    name: 'Load Balancer ${{ inputs.purpose }}'
    name: 'Load Balancer ${{inputs.purpose}}'
    uses: ./.github/workflows/LBCreate.yml
    needs: resource_group
    secrets:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    secrets: inherit
    with:
      requesttype: '${{ inputs.requesttype }}'
      environment: '${{ inputs.environment }}'
      location: '${{ inputs.location }}'
      purposeRG: '${{ inputs.purposeRG }}'
      sku: '${{ inputs.sku }}'
      private_ip: '${{ inputs.private_ip }}'
      subnetName: '${{ inputs.subnetName }}'

      requesttype:               '${{inputs.requesttype}}'
      environment:               '${{inputs.environment}}'
      location:                  '${{inputs.location}}'
      sku_name:                  '${{inputs.sku_name}}'
      purpose:                   '${{inputs.purpose}}'
      purposeRG:                 '${{inputs.purposeRG}}'
      subnetname:                '${{inputs.subnetname}}'
      private_ip_address:        '${{inputs.private_ip_address}}'
      nic_names:                  '${{inputs.nic_names}}'

  load_balancer_existing_rg:
    if: (github.event.inputs.requesttype == 'Create (with Existing RG)')
    name: 'Load Balancer ${{ inputs.purpose }}'
    name: 'Load Balancer ${{inputs.purpose}}'
    uses: ./.github/workflows/LBCreate.yml
    secrets:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    secrets: inherit
    with:
      requesttype: '${{ inputs.requesttype }}'
      environment: '${{ inputs.environment }}'
      location: '${{ inputs.location }}'
      purposeRG: '${{ inputs.purposeRG }}'
      sku: '${{ inputs.sku }}'
      private_ip: '${{ inputs.private_ip }}'
      subnetName: '${{ inputs.subnetName }}'

      requesttype:               '${{inputs.requesttype}}'
      environment:               '${{inputs.environment}}'
      location:                  '${{inputs.location}}'
      sku_name:                  '${{inputs.sku_name}}'
      purpose:                   '${{inputs.purpose}}'
      purposeRG:                 '${{inputs.purposeRG}}'
      subnetname:                '${{inputs.subnetname}}'
      private_ip_address:        '${{inputs.private_ip_address}}'
      nic_names:                  '${{inputs.nic_names}}'

  load_balancer_remove:
    if: (github.event.inputs.requesttype == 'Remove (Destroy LB)')
    name: 'Remove Load Balancer ${{ inputs.purpose }}'
    uses: ./.github/workflows/LBRemove.yml
    secrets:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    if: (github.event.inputs.requesttype == 'Remove')
    name: 'Maintain Load Balancer ${{inputs.purpose}}'
    uses: ./.github/workflows/LBCreate.yml
    secrets: inherit
    with:
      requesttype: '${{ inputs.requesttype }}'
      environment: '${{ inputs.environment }}'
      location: '${{ inputs.location }}'
      purposeRG: '${{ inputs.purposeRG }}'
      sku: '${{ inputs.sku }}'
      private_ip: '${{ inputs.private_ip }}'
      subnetName: '${{ inputs.subnetName }}'
      requesttype:               '${{inputs.requesttype}}'
      environment:               '${{inputs.environment}}'
      location:                  '${{inputs.location}}'
      sku_name:                  '${{inputs.sku_name}}'
      purpose:                   '${{inputs.purpose}}'
      purposeRG:                 '${{inputs.purposeRG}}'
      subnetname:                '${{inputs.subnetname}}'
      private_ip_address:        '${{inputs.private_ip_address}}'
      nic_names:                 '${{inputs.nic_names}}'
 144 changes: 95 additions & 49 deletions144  
.github/workflows/LBCreate.yml
Viewed
 actions/setup-node 2.*.*
 hashicorp/setup-terraform 3.*.*
 hashicorp/terraform-github-actions master
 2.92k
Give feedback on dependency review
 147 changes: 147 additions & 0 deletions147  
Azure/Azure-LB/LB-module/main.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -0,0 +1,147 @@
provider "azurerm" {
  features {}
}

data "azurerm_subscription" "current" {}  # Read the current subscription info


data "azurerm_network_interface" "nic" {
  for_each = toset(local.nic_names)

  name                = each.value
  resource_group_name = join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, var.purpose_rg, "rg"])
}

locals {
  nic_names = split(",", var.nic_names)
  get_data = csvdecode(file("../parameters.csv"))
  # Define data for naming standards
  naming = {
    bu                = lower(split("-", data.azurerm_subscription.current.display_name)[1])
    environment       = lower(split("-", data.azurerm_subscription.current.display_name)[2])
    locations         = var.location
    nn                = lower(split("-", data.azurerm_subscription.current.display_name)[3])
    subscription_name = data.azurerm_subscription.current.display_name
    subscription_id   = data.azurerm_subscription.current.id
  }
  env_location = {
    env_abbreviation       = var.environment_map[local.naming.environment]
    locations_abbreviation = var.location_map[local.naming.locations]
  }

  # Split purpose_full into purpose and sequence based on "/"
  purpose_parts = split("/", var.purpose)
  # Extract purpose and sequence from purpose_parts
  purpose  = length(local.purpose_parts) > 0 ? local.purpose_parts[0] : null
  sequence = length(local.purpose_parts) > 1 ? local.purpose_parts[1] : null

  purpose_rg = sgs
}

data "azurerm_resource_group" "rg" {
  for_each = { for inst in local.get_data : inst.unique_id => inst }
  name     = join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, local.purpose_rg, "rg"])
}

output "resource_group_name" {
  value = data.azurerm_resource_group.rg
}

data "azurerm_virtual_network" "vnet" {
  for_each = { for index, inst in local.get_data : index => inst }
   name = (lookup(each.value, "vnet_name", null) != null && lookup(each.value, "vnet_name", "") != "") ? each.value.vnet_name : join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "vnet", local.naming.nn])
   resource_group_name  = (lookup(each.value, "vnet_resource_group", null) != null && lookup(each.value, "vnet_resource_group", "") != "") ? each.value.vnet_resource_group : join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "spokenetwork-rg"])

}

output "virtual_network_id" {
  value      = data.azurerm_virtual_network.vnet
  sensitive  = true
}

data "azurerm_subnet" "subnet" {
  for_each = { for index, inst in local.get_data : index => inst }
  name                 = (lookup(each.value, "subnet_name", null) != null && lookup(each.value, "subnet_name", "") != "") ? each.value.subnet_name : var.subnetname //lz<app>-<env>-<region>-<purpose>-snet-<nn>
  virtual_network_name = data.azurerm_virtual_network.vnet[each.key].name
  resource_group_name  = (lookup(each.value, "vnet_resource_group", null) != null && lookup(each.value, "vnet_resource_group", "") != "") ? each.value.vnet_resource_group : join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "spokenetwork-rg"])
}

output "subnet_id" {
  value      = data.azurerm_subnet.subnet
  sensitive  = true
}

# Azure Load Balancer Resource
resource "azurerm_lb" "internal_lb" {
  for_each            = { for inst in local.get_data : inst.unique_id => inst }
  name                = join("-", [var.lb_name_prefix, local.naming.environment, local.env_location.locations_abbreviation, local.purpose_rg, local.purpose, local.sequence])
  location            = var.location
  resource_group_name = data.azurerm_resource_group.rg[each.key].name
  sku                 = lookup(each.value, "sku_name", var.sku_name)

  frontend_ip_configuration {
    name                          = "internal-${local.purpose_rg}-server-feip"
    subnet_id                     = data.azurerm_subnet.subnet["0"].id
    private_ip_address            = var.private_ip_address
    private_ip_address_allocation = var.private_ip_address_allocation
  }
}

# Define Backend Address Pool
resource "azurerm_lb_backend_address_pool" "internal_lb_bepool" {
  for_each        = azurerm_lb.internal_lb
  loadbalancer_id = azurerm_lb.internal_lb[each.key].id
  name            = "internal-${local.purpose_rg}-server-bepool"
}

resource "azurerm_network_interface_backend_address_pool_association" "lb_backend_association" {
  for_each = toset(local.nic_names)

  network_interface_id   = data.azurerm_network_interface.nic[each.value].id
  ip_configuration_name  = data.azurerm_network_interface.nic[each.value].ip_configuration[0].name
  backend_address_pool_id = azurerm_lb_backend_address_pool.internal_lb_bepool["1"].id
}
# Load Balancer Probe
resource "azurerm_lb_probe" "tcp_probe" {
  for_each            = azurerm_lb.internal_lb
  name                = "internal-${local.purpose_rg}-server-tcp-probe"
  loadbalancer_id     = azurerm_lb.internal_lb[each.key].id
  protocol            = var.lb_probe_protocol
  port                = var.lb_probe_port
  interval_in_seconds = var.lb_probe_interval_in_seconds
  number_of_probes    = var.lb_probe_number_of_probes
}

# Load Balancer TCP Rule
resource "azurerm_lb_rule" "tcp_rule" {
  for_each                       = azurerm_lb.internal_lb
  name                           = "internal-${local.purpose_rg}-server-tcp-lbrule"
  loadbalancer_id                = azurerm_lb.internal_lb[each.key].id
  protocol                       = var.lb_rule_tcp_protocol
  frontend_port                  = var.lb_rule_tcp_frontend_port
  backend_port                   = var.lb_rule_tcp_backend_port
  frontend_ip_configuration_name = azurerm_lb.internal_lb[each.key].frontend_ip_configuration[0].name
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.internal_lb_bepool[each.key].id]
  idle_timeout_in_minutes        = var.lb_rule_tcp_idle_timeout_in_minutes
  enable_floating_ip             = var.lb_rule_tcp_enable_floating_ip
  enable_tcp_reset               = var.lb_rule_tcp_enable_tcp_reset
  disable_outbound_snat          = var.lb_rule_tcp_disable_outbound_snat
  probe_id                       = azurerm_lb_probe.tcp_probe[each.key].id
}

# Load Balancer HTTPS Rule
resource "azurerm_lb_rule" "https_rule" {
  for_each                       = azurerm_lb.internal_lb
  name                           = "internal-${local.purpose_rg}-server-https-lbrule"
  loadbalancer_id                = azurerm_lb.internal_lb[each.key].id
  protocol                       = var.lb_rule_https_protocol
  frontend_port                  = var.lb_rule_https_frontend_port
  backend_port                   = var.lb_rule_https_backend_port
  frontend_ip_configuration_name = azurerm_lb.internal_lb[each.key].frontend_ip_configuration[0].name
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.internal_lb_bepool[each.key].id]
  idle_timeout_in_minutes        = var.lb_rule_https_idle_timeout_in_minutes
  enable_floating_ip             = var.lb_rule_https_enable_floating_ip
  enable_tcp_reset               = var.lb_rule_https_enable_tcp_reset
  disable_outbound_snat          = var.lb_rule_https_disable_outbound_snat
  probe_id                       = azurerm_lb_probe.tcp_probe[each.key].id
}
 181 changes: 181 additions & 0 deletions181  
Azure/Azure-LB/LB-module/variable.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -0,0 +1,181 @@
variable "environment_map" {
  type = map
  description = "environment"
  default = {
    "dev"  = "dev"
    "uat" = "uat"
    "fof" = "fof"
    "prod" = "prod"
    "qa" = "qa"
  }
}

variable "location_map" {
  type = map
  description = "location_map"
    default = {
    "eastus2"  = "eus2"
    "centralus" = "cus"
    "uksouth" = "uks"
    "ukwest" = "ukw"
    "us"= "eus2"

  }

}

# variable "RGname" {
#   description = "Optional existing Resource Group name. If not provided, it will be computed."
#   type        = string
# }

variable "sku_name" {
  description = "SKU name for the Load Balancer."
  type        = string

  validation {
    condition     = contains(["Basic", "Standard"], var.sku_name)
    error_message = "sku_name must be either 'Basic' or 'Standard'."
  }
}

variable "location" {
  type = string
  description = "location"
}

# Define the name for the subnet
variable "subnetname" {
  type = string
#  sensitive = true

}

variable "private_ip_address" {
  description = "The private IP address to assign to the load balancer frontend configuration."
  type        = string
}

variable "purpose" {
  type        = string
  description = "(Required) The purpose in the format 'role/sequence' (e.g., 'webapp/02')."
  validation {
    condition     = can(regex("^.+/\\d+$", var.purpose))
    error_message = "The purpose must be in the format 'role/sequence', e.g., 'webapp/02'."
  }
}

variable "purpose_rg" {
  description = "Purpose for the resource group"
  type        = string
}

variable "nic_names" {
  type        = string
  description = "List of network interface names to query."
}

variable "lb_rule_https_protocol" {
  description = "Protocol for HTTPS Load Balancer rule"
  type        = string
}

variable "lb_rule_https_frontend_port" {
  description = "Frontend port for HTTPS Load Balancer rule"
  type        = number
}

variable "lb_rule_https_backend_port" {
  description = "Backend port for HTTPS Load Balancer rule"
  type        = number
}

variable "lb_rule_https_idle_timeout_in_minutes" {
  description = "Idle timeout in minutes for HTTPS Load Balancer rule"
  type        = number
}

variable "lb_rule_https_enable_floating_ip" {
  description = "Enable floating IP for HTTPS Load Balancer rule"
  type        = bool
}

variable "lb_rule_https_enable_tcp_reset" {
  description = "Enable TCP reset for HTTPS Load Balancer rule"
  type        = bool
}

variable "lb_rule_https_disable_outbound_snat" {
  description = "Disable outbound SNAT for HTTPS Load Balancer rule"
  type        = bool
}

variable "lb_rule_tcp_protocol" {
  description = "Protocol for TCP Load Balancer rule"
  type        = string
}

variable "lb_rule_tcp_frontend_port" {
  description = "Frontend port for TCP Load Balancer rule"
  type        = number
}

variable "lb_rule_tcp_backend_port" {
  description = "Backend port for TCP Load Balancer rule"
  type        = number
}

variable "lb_rule_tcp_idle_timeout_in_minutes" {
  description = "Idle timeout in minutes for TCP Load Balancer rule"
  type        = number
}

variable "lb_rule_tcp_enable_floating_ip" {
  description = "Enable floating IP for TCP Load Balancer rule"
  type        = bool
}

variable "lb_rule_tcp_enable_tcp_reset" {
  description = "Enable TCP reset for TCP Load Balancer rule"
  type        = bool
}

variable "lb_rule_tcp_disable_outbound_snat" {
  description = "Disable outbound SNAT for TCP Load Balancer rule"
  type        = bool
}

variable "lb_probe_protocol" {
  description = "Protocol for Load Balancer probe"
  type        = string
}

variable "lb_probe_port" {
  description = "Port for Load Balancer probe"
  type        = number
}

variable "lb_probe_interval_in_seconds" {
  description = "Interval in seconds for Load Balancer probe"
  type        = number
}

variable "lb_probe_number_of_probes" {
  description = "Number of probes for Load Balancer probe"
  type        = number
}

variable "private_ip_address_allocation" {
  description = "Allocation method for private IP address"
  type        = string
}

variable "lb_name_prefix" {
  description = "Prefix for Load Balancer names"
  type        = string
}

variable "lb_name_infix" {
  description = "Infix for Load Balancer names"
  type        = string
}
 167 changes: 49 additions & 118 deletions167  
Azure/Azure-LB/main.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -1,121 +1,52 @@
# Provider and Data Sources
provider "azurerm" {
  features {}
}

data "azurerm_subscription" "current" {}

data "azurerm_client_config" "clientconfig" {}

# Local Variables
locals {
  get_data = csvdecode(file("../parameters.csv"))

  naming = {
    bu                = lower(split("-", data.azurerm_subscription.current.display_name)[1])
    environment       = lower(split("-", data.azurerm_subscription.current.display_name)[2])
    locations         = var.location
    nn                = lower(split("-", data.azurerm_subscription.current.display_name)[3])
    subscription_name = data.azurerm_subscription.current.display_name
    subscription_id   = data.azurerm_subscription.current.id
  }

  env_location = {
    env_abbreviation       = var.environment_map[local.naming.environment]
    locations_abbreviation = var.location_map[local.naming.locations]
  }

  purpose_rg = var.purpose_rg
}

data "azurerm_resource_group" "rg" {
  for_each = { for inst in local.get_data : inst.unique_id => inst }
  name     = join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, local.purpose_rg, "rg"])
}

# Virtual Network and Subnet Data Sources
data "azurerm_virtual_network" "vnet" {
  for_each = { for inst in local.get_data : inst.unique_id => inst }
  name = lookup(each.value, "vnet_name", join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "vnet", local.naming.nn]))
  resource_group_name = data.azurerm_resource_group.rg[each.key].name
}

data "azurerm_subnet" "subnet" {
  for_each = { for inst in local.get_data : inst.unique_id => inst }
  name                 = lookup(each.value, "subnet_name", var.subnetname)
  virtual_network_name = data.azurerm_virtual_network.vnet[each.key].name
  resource_group_name  = data.azurerm_resource_group.rg[each.key].name
}

# Random ID for Naming Uniqueness
resource "random_id" "randomnumber" {
  byte_length = 1
}

# Azure Load Balancer Resource
resource "azurerm_lb" "internal_lb" {
  for_each = { for inst in local.get_data : inst.unique_id => inst }
  name                = join("-", ["ari", local.naming.environment, local.env_location.locations_abbreviation, local.purpose_rg, "lbi", random_id.randomnumber.hex])
  location            = var.location
  resource_group_name = data.azurerm_resource_group.rg[each.key].name
  sku                 = (lookup(each.value,"sku_name",null) != null && lookup(each.value,"sku_name","") != "") ? each.value.sku_name : var.sku_name

  frontend_ip_configuration {
    name                          = "internal-${local.purpose_rg}-server-feip"
    subnet_id                     = data.azurerm_subnet.subnet[each.key].id
    private_ip_address            = "10.82.58.233"
    private_ip_address_allocation = "Static"
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=3.100.0" 
    }

  }

  backend_address_pool {
    name = "internal-${local.purpose_rg}-server-bepool"
  }
}

# Load Balancer Probe
resource "azurerm_lb_probe" "tcp_probe" {
  for_each = azurerm_lb.internal_lb
  name                = "internal-${local.purpose_rg}-server-tcp-probe"
  resource_group_name = azurerm_lb.internal_lb[each.key].resource_group_name
  loadbalancer_id     = azurerm_lb.internal_lb[each.key].id
  protocol            = "Tcp"
  port                = 20000
  interval_in_seconds = 10
  number_of_probes    = 5
}

# Load Balancer TCP Rule
resource "azurerm_lb_rule" "tcp_rule" {
  for_each = azurerm_lb.internal_lb
  name                           = "internal-${local.purpose_rg}-server-tcp-lbrule"
  resource_group_name            = azurerm_lb.internal_lb[each.key].resource_group_name
  loadbalancer_id                = azurerm_lb.internal_lb[each.key].id
  protocol                       = "Tcp"
  frontend_port                  = 20000
  backend_port                   = 20000
  frontend_ip_configuration_name = azurerm_lb.internal_lb[each.key].frontend_ip_configuration[0].name
  backend_address_pool_id        = azurerm_lb.internal_lb[each.key].backend_address_pool[0].id
  idle_timeout_in_minutes        = 5
  enable_floating_ip             = false
  enable_tcp_reset               = false
  disable_outbound_snat          = false
  probe_id                       = azurerm_lb_probe.tcp_probe[each.key].id
  backend "azurerm" {}
}
 module "azure_load_balancer" {
  source = "./LB-module"

  # Required inputs
  nic_names                     = var.nic_names
  location                      = var.location
  environment_map               = var.environment_map
  location_map                  = var.location_map
  purpose                       = var.purpose
  purpose_rg                    = var.purpose_rg
  subnetname                    = var.subnetname
  private_ip_address            = var.private_ip_address
  sku_name                      = var.sku_name
  lb_name_prefix                = var.lb_name_prefix
  lb_name_infix                 = var.lb_name_infix
  private_ip_address_allocation = var.private_ip_address_allocation

  # Probe configurations
  lb_probe_protocol             = var.lb_probe_protocol
  lb_probe_port                 = var.lb_probe_port
  lb_probe_interval_in_seconds  = var.lb_probe_interval_in_seconds
  lb_probe_number_of_probes     = var.lb_probe_number_of_probes

  # TCP rule configurations
  lb_rule_tcp_protocol                   = var.lb_rule_tcp_protocol
  lb_rule_tcp_frontend_port              = var.lb_rule_tcp_frontend_port
  lb_rule_tcp_backend_port               = var.lb_rule_tcp_backend_port
  lb_rule_tcp_idle_timeout_in_minutes    = var.lb_rule_tcp_idle_timeout_in_minutes
  lb_rule_tcp_enable_floating_ip         = var.lb_rule_tcp_enable_floating_ip
  lb_rule_tcp_enable_tcp_reset           = var.lb_rule_tcp_enable_tcp_reset
  lb_rule_tcp_disable_outbound_snat      = var.lb_rule_tcp_disable_outbound_snat

  # HTTPS rule configurations
  lb_rule_https_protocol                 = var.lb_rule_https_protocol
  lb_rule_https_frontend_port            = var.lb_rule_https_frontend_port
  lb_rule_https_backend_port             = var.lb_rule_https_backend_port
  lb_rule_https_idle_timeout_in_minutes  = var.lb_rule_https_idle_timeout_in_minutes
  lb_rule_https_enable_floating_ip       = var.lb_rule_https_enable_floating_ip
  lb_rule_https_enable_tcp_reset         = var.lb_rule_https_enable_tcp_reset
  lb_rule_https_disable_outbound_snat    = var.lb_rule_https_disable_outbound_snat
}

# Load Balancer HTTPS Rule
resource "azurerm_lb_rule" "https_rule" {
  for_each = azurerm_lb.internal_lb
  name                           = "internal-${local.purpose_rg}-server-https-lbrule"
  resource_group_name            = azurerm_lb.internal_lb[each.key].resource_group_name
  loadbalancer_id                = azurerm_lb.internal_lb[each.key].id
  protocol                       = "Tcp"
  frontend_port                  = 443
  backend_port                   = 443
  frontend_ip_configuration_name = azurerm_lb.internal_lb[each.key].frontend_ip_configuration[0].name
  backend_address_pool_id        = azurerm_lb.internal_lb[each.key].backend_address_pool[0].id
  idle_timeout_in_minutes        = 4
  enable_floating_ip             = false
  enable_tcp_reset               = false
  disable_outbound_snat          = false
  probe_id                       = azurerm_lb_probe.tcp_probe[each.key].id
}
  194 changes: 168 additions & 26 deletions194  
Azure/Azure-LB/variable.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -1,13 +1,7 @@
variable "environment_map" {
  type = map
  description = "environment"
  default = {
    "dev"  = "dev"
    "uat" = "uat"
    "fof" = "fof"
    "prod" = "prod"
    "qa" = "qa"
  }
variable "location" {
  type = string
  description = "location"
  default = "eastus2"
}

variable "location_map" {
@@ -24,30 +18,178 @@ variable "location_map" {

}

variable "sku_name" {
  description = "SKU name for the Load Balancer."
  type        = string
  default     = "Standard"
variable "environment_map" {
  type = map
  description = "environment"
  default = {
    "dev"  = "dev"
    "uat" = "uat"
    "fof" = "fof"
    "prod" = "prod"
    "qa" = "qa"
  }
}

variable "purpose" {
  type        = string
  description = "(Required) The purpose in the format 'role/sequence' (e.g., 'webapp/02')."
  validation {
    condition     = contains(["Basic", "Standard"], var.sku_name)
    error_message = "sku_name must be either 'Basic' or 'Standard'."
    condition     = can(regex("^.+/\\d+$", var.purpose))
    error_message = "The purpose must be in the format 'role/sequence', e.g., 'webapp/02'."
  }
}

variable "location" {
variable "nic_names" {
  type        = string
  description = "List of network interface names to query."
}

variable "subnetname" {
  type = string
  description = "location"
  default = "eastus2"
  default = "5874-dev-eus2-aks-snet-02"
@darwim_grid darwim_grid on Nov 5
default should be empty

@akintk_grid	Reply...
#  sensitive = true

}

variable "private_ip_address" {
  description = "The private IP address to assign to the load balancer frontend configuration."
  type        = string
  default     = ""
}

variable "purpose_rg" {
  description = "Purpose for the resource group"
  type        = string
  default     = "default"
  description = "(Required) The purpose segment of the Resource Group name. Should not exceed 5 characters."
  validation {
    condition     = strcontains(var.purpose_rg, "-") ? length(var.purpose_rg) <= 80 : length(var.purpose_rg) <= 5
    error_message = "(Required) Purpose segment cannot exceed 5 characters. Name cannot exceed 80."
  }  
 }
  default     = "sgs"
}

variable "sku_name" {
  description = "SKU name for the Load Balancer."
  type        = string
  default     = "Standard"
}

variable "lb_name_prefix" {
  description = "Prefix for Load Balancer names"
  type        = string
  default     = "6425"
}

variable "lb_name_infix" {
  description = "Infix for Load Balancer names"
  type        = string
  default     = "lbi"
}

variable "private_ip_address_allocation" {
  description = "Allocation method for private IP address"
  type        = string
  default     = "Static"
}

variable "lb_probe_protocol" {
  description = "Protocol for Load Balancer probe"
  type        = string
  default     = "Tcp"
}

variable "lb_probe_port" {
  description = "Port for Load Balancer probe"
  type        = number
  default     = 20005
}
variable "lb_probe_interval_in_seconds" {
  description = "Interval in seconds for Load Balancer probe"
  type        = number
  default     = 5
}

variable "lb_probe_number_of_probes" {
  description = "Number of probes for Load Balancer probe"
  type        = number
  default     = 3
}

variable "lb_rule_tcp_protocol" {
  description = "Protocol for TCP Load Balancer rule"
  type        = string
  default     = "Tcp"
}

variable "lb_rule_tcp_frontend_port" {
  description = "Frontend port for TCP Load Balancer rule"
  type        = number
  default     = 20000
}

variable "lb_rule_tcp_backend_port" {
  description = "Backend port for TCP Load Balancer rule"
  type        = number
  default     = 20000
}

variable "lb_rule_tcp_idle_timeout_in_minutes" {
  description = "Idle timeout in minutes for TCP Load Balancer rule"
  type        = number
  default     = 5
}

variable "lb_rule_tcp_enable_floating_ip" {
  description = "Enable floating IP for TCP Load Balancer rule"
  type        = bool
  default     = false
}

variable "lb_rule_tcp_enable_tcp_reset" {
  description = "Enable TCP reset for TCP Load Balancer rule"
  type        = bool
  default     = false
}

variable "lb_rule_tcp_disable_outbound_snat" {
  description = "Disable outbound SNAT for TCP Load Balancer rule"
  type        = bool
  default     = false
}

variable "lb_rule_https_protocol" {
  description = "Protocol for HTTPS Load Balancer rule"
  type        = string
  default = "Tcp"
}

variable "lb_rule_https_frontend_port" {
  description = "Frontend port for HTTPS Load Balancer rule"
  type        = number
  default     = 443
}

variable "lb_rule_https_backend_port" {
  description = "Backend port for HTTPS Load Balancer rule"
  type        = number
  default     = 443
}

variable "lb_rule_https_idle_timeout_in_minutes" {
  description = "Idle timeout in minutes for HTTPS Load Balancer rule"
  type        = number
  default     = 5
}

variable "lb_rule_https_enable_floating_ip" {
  description = "Enable floating IP for HTTPS Load Balancer rule"
  type        = bool
  default     = false
}

variable "lb_rule_https_enable_tcp_reset" {
  description = "Enable TCP reset for HTTPS Load Balancer rule"
  type        = bool
  default     = false
}

variable "lb_rule_https_disable_outbound_snat" {
  description = "Disable outbound SNAT for HTTPS Load Balancer rule"
  type        = bool
  default     = false
}
  5 changes: 5 additions & 0 deletions5  
Azure/windows-vm/main.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -658,6 +658,11 @@ resource "azurerm_windows_virtual_machine" "main" {
    version   = "latest"
   }
 }

 resource "azurerm_lb_backend_address_pool_association" "VM_to_LB" {
  loadbalancer_backend_address_pool_id = var.loadbalancer_id
  virtual_network_id = azure_network_interface.[ (each.value).nic_id ]              = 
}
resource "random_id" "for_password" {
  keepers = {
    time = "${timestamp()}"
  6 changes: 5 additions & 1 deletion6  
Azure/windows-vm/outputs.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -10,4 +10,8 @@ output "data_disk_count" {
 }
output "input_validation" {
    value = [for inst in local.validation_map : inst.state]
 }
 }
 output "nic_ids" {
  value = [for nic in azurerm_network_interface.nic : nic.id]
  description = "List of NIC IDs for the deployed VMs."
}
  4 changes: 4 additions & 0 deletions4  
Azure/windows-vm/variables.tf
Viewed
Original file line number	Diff line number	Diff line change
@@ -239,3 +239,7 @@ variable "zone" {
  default     = ""
  description = "(Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. "
 }

variable "loadbalancer_id" {
  type = string
}
